import asyncio
import telegram
from telegram import Bot
from telegram.error import TelegramError
from typing import Optional, Dict, Any

from config.settings import settings
from database.database import db_manager, NewsService
from database.models import News, NewsStatus
from utils.logger import logger, log_telegram_action


class TelegramPublisher:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram –∫–∞–Ω–∞–ª"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        self.bot = None
        self._initialize_bot()
    
    def _initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        try:
            if settings.TELEGRAM_BOT_TOKEN and settings.TELEGRAM_BOT_TOKEN != "YOUR_BOT_TOKEN_HERE":
                self.bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
                logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.error("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        return self.bot is not None
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        if not self.is_available():
            return False
        
        try:
            me = await self.bot.get_me()
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ: @{me.username}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False
    
    def format_news_message(self, news: News) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ò–ò –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ
            title = news.processed_title or news.title
            content = news.processed_content or news.content
            category = news.category or "–û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
            emoji = news.emoji or settings.CATEGORIES.get(category, "üì∞")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Telegram
            if len(title) > 100:
                title = title[:97] + "..."
            
            if len(content) > 900:
                content = content[:897] + "..."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"{emoji} <b>{title}</b>\n\n"
            message += f"{content}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            message += f"#{category.replace(' ', '_')}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if news.url:
                message += f"\n\nüîó <a href='{news.url}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"
            
            return message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ {news.id}: {e}")
            return f"üì∞ <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏</b>\n\n{news.title}"
    
    async def publish_news(self, news_id: int) -> bool:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª"""
        if not self.is_available():
            logger.error("Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return False
        
        try:
            with db_manager.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
                news = session.query(News).filter(News.id == news_id).first()
                if not news:
                    logger.error(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                if news.status == NewsStatus.PUBLISHED.value:
                    logger.warning(f"–ù–æ–≤–æ—Å—Ç—å {news_id} —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
                    return True
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = self.format_news_message(news)
                
                # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
                sent_message = await self.bot.send_message(
                    chat_id=settings.TELEGRAM_CHANNEL_ID,
                    text=message,
                    parse_mode='HTML',
                    disable_web_page_preview=False
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–∏
                NewsService.update_news_status(session, news_id, NewsStatus.PUBLISHED.value)
                
                log_telegram_action("publish_news", chat_id=settings.TELEGRAM_CHANNEL_ID)
                logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {sent_message.message_id}")
                
                return True
                
        except TelegramError as e:
            log_telegram_action("publish_news", chat_id=settings.TELEGRAM_CHANNEL_ID, 
                              success=False, error=str(e))
            logger.error(f"Telegram –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {e}")
            return False
    
    async def publish_pending_news(self, limit: int = 5) -> Dict[str, int]:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not self.is_available():
            return {"published": 0, "errors": 0}
        
        published_count = 0
        error_count = 0
        
        try:
            with db_manager.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                processed_news = NewsService.get_processed_news(session, limit)
                
                for news in processed_news:
                    success = await self.publish_news(news.id)
                    if success:
                        published_count += 1
                    else:
                        error_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
                    await asyncio.sleep(1)
                
                logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {published_count} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            error_count += 1
        
        return {"published": published_count, "errors": error_count}
    
    async def send_admin_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        if not self.is_available():
            return False
        
        try:
            await self.bot.send_message(
                chat_id=settings.ADMIN_USER_ID,
                text=message,
                parse_mode='HTML'
            )
            
            log_telegram_action("send_admin_message", user_id=settings.ADMIN_USER_ID)
            return True
            
        except Exception as e:
            log_telegram_action("send_admin_message", user_id=settings.ADMIN_USER_ID, 
                              success=False, error=str(e))
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            return False
    
    async def notify_admin_about_news(self, news_count: int, source_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö"""
        message = f"üì∞ <b>–ù–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!</b>\n\n"
        message += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {news_count}\n"
        message += f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {source_name}\n\n"
        message += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π."
        
        await self.send_admin_message(message)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–∑–¥–∞—Ç–µ–ª—è
telegram_publisher = TelegramPublisher()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def publish_news_sync(news_id: int) -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        return loop.run_until_complete(telegram_publisher.publish_news(news_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False
    finally:
        loop.close()


def test_telegram_connection() -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        return loop.run_until_complete(telegram_publisher.test_connection())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
        return False
    finally:
        loop.close()