#!/usr/bin/env python3
"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import signal
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from config.settings import settings
from utils.logger import logger
from database.database import init_database
from scheduler.task_scheduler import task_scheduler
from parsers.parser_manager import parser_manager
from ai_integration.ai_processor import ai_manager


class NewsBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.is_running = False
        self.components_initialized = False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        logger.info("üì∞ News Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...")
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
        self.stop()
        sys.exit(0)
    
    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self._validate_settings()
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            logger.info("üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            init_database()
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            logger.info("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
            self._check_ai_providers()
            
            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            logger.info("‚è∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            task_scheduler.start()
            
            self.components_initialized = True
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    def _validate_settings(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        required_settings = [
            ("TELEGRAM_BOT_TOKEN", "–¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"),
            ("TELEGRAM_CHANNEL_ID", "ID —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞"),
            ("ADMIN_USER_ID", "ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        ]
        
        missing_settings = []
        
        for setting_name, description in required_settings:
            value = getattr(settings, setting_name, None)
            if not value or str(value) in ["YOUR_BOT_TOKEN_HERE", "@your_channel_name", "0"]:
                missing_settings.append(f"{setting_name} ({description})")
        
        if missing_settings:
            logger.error("‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
            for setting in missing_settings:
                logger.error(f"   - {setting}")
            logger.error("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ config/settings.py")
            raise ValueError("–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        if not settings.NEWS_SOURCES:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
        else:
            enabled_sources = [s for s in settings.NEWS_SOURCES if s.get("enabled", True)]
            logger.info(f"üì° –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(enabled_sources)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    
    def _check_ai_providers(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        provider_status = ai_manager.get_provider_status()
        
        available_providers = [name for name, available in provider_status.items() if available]
        
        if available_providers:
            logger.info(f"ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {', '.join(available_providers)}")
        else:
            logger.warning("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            logger.warning("   –ù–æ–≤–æ—Å—Ç–∏ –±—É–¥—É—Ç –ø–∞—Ä—Å–∏—Ç—å—Å—è –±–µ–∑ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ News Bot...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏
            if not self.components_initialized:
                self.initialize_components()
            
            self.is_running = True
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
            self._print_status()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
            self._run_main_loop()
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            self.stop()
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stop()
            raise
    
    def _run_main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é
            logger.info("üì∞ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")
            self.manual_parse()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            while self.is_running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    import time
                    time.sleep(30)
                    
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    self._periodic_health_check()
                    
                except KeyboardInterrupt:
                    break
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            raise
    
    def _periodic_health_check(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if not task_scheduler.is_running:
                logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                task_scheduler.start()
            
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if not self.is_running:
            return
        
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ News Bot...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if task_scheduler.is_running:
                logger.info("‚è∞ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
                task_scheduler.stop()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            logger.info("üíæ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            from database.database import db_manager
            db_manager.close_engine()
            
            self.is_running = False
            logger.info("‚úÖ News Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    def manual_parse(self):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        
        try:
            results = parser_manager.parse_all_sources()
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_found = sum(r.get("news_found", 0) for r in results)
            total_created = sum(r.get("news_created", 0) for r in results)
            total_duplicates = sum(r.get("duplicates", 0) for r in results)
            successful_sources = sum(1 for r in results if r.get("success", False))
            
            logger.info(
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞: "
                f"{successful_sources}/{len(results)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, "
                f"–Ω–∞–π–¥–µ–Ω–æ {total_found}, —Å–æ–∑–¥–∞–Ω–æ {total_created}, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ {total_duplicates}"
            )
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return []
    
    def _print_status(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("=" * 60)
        logger.info("üì∞ NEWS BOT STATUS")
        logger.info("=" * 60)
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info(f"üóÇÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if self.components_initialized else '‚ùå –û—à–∏–±–∫–∞'}")
        logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if task_scheduler.is_running else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
        # –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        provider_status = ai_manager.get_provider_status()
        available_providers = [name for name, available in provider_status.items() if available]
        logger.info(f"ü§ñ –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {'‚úÖ ' + ', '.join(available_providers) if available_providers else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}")
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        active_sources = len([s for s in settings.NEWS_SOURCES if s.get("enabled", True)])
        logger.info(f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫–∏: ‚úÖ {active_sources} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞: {settings.PARSING_INTERVAL} –º–∏–Ω—É—Ç")
        logger.info(f"ü§ñ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if settings.USE_AI_PROCESSING else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        logger.info(f"üì¢ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if settings.AUTO_PUBLISH else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        
        logger.info("=" * 60)
    
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""
        return {
            "is_running": self.is_running,
            "components_initialized": self.components_initialized,
            "scheduler_status": task_scheduler.get_status(),
            "parser_status": parser_manager.get_parsing_status(),
            "ai_providers": ai_manager.get_provider_status()
        }


def print_help():
    """–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    help_text = """
üì∞ News Bot - Telegram –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    python main.py [–ö–û–ú–ê–ù–î–ê]

–ö–û–ú–ê–ù–î–´:
    start           –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    parse           –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    test            –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    status          –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    help            –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
    python main.py              # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    python main.py parse        # –†–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    python main.py test         # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    python main.py status       # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üìù –ù–ê–°–¢–†–û–ô–ö–ê:
    1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env
    2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ config/settings.py
    4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py

üîó –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:
    –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ —Ñ–∞–π–ª–µ README.md
    """
    print(help_text)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    command = sys.argv[1] if len(sys.argv) > 1 else "start"
    
    if command == "help" or command == "--help" or command == "-h":
        print_help()
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = NewsBot()
    
    try:
        if command == "start":
            # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
            bot.start()
            
        elif command == "parse":
            # –†–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")
            bot.initialize_components()
            results = bot.manual_parse()
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
            print("-" * 50)
            for result in results:
                status = "‚úÖ" if result["success"] else "‚ùå"
                print(f"{status} {result['source_name']}: "
                      f"–Ω–∞–π–¥–µ–Ω–æ {result['news_found']}, "
                      f"—Å–æ–∑–¥–∞–Ω–æ {result['news_created']}")
                
                if not result["success"] and result.get("error"):
                    print(f"   –û—à–∏–±–∫–∞: {result['error']}")
            
        elif command == "test":
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
            
            try:
                bot.initialize_components()
                print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
                print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã...")
                for provider_name in ["claude", "gigachat", "openai"]:
                    success, message = ai_manager.test_provider(provider_name)
                    status = "‚úÖ" if success else "‚ùå"
                    print(f"{status} {provider_name}: {message}")
                
                print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                sys.exit(1)
            
        elif command == "status":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
            print("üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...")
            bot.initialize_components()
            bot._print_status()
            
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'python main.py help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        bot.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.stop()
        sys.exit(1)


if __name__ == "__main__":
    main()